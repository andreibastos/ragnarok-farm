const { insertCompleteMob } = require('./db/insert');
const { scrapeMobData } = require('./scrapers/mob-scraper');
const { scrapeContainerItems, scrapeAllContainers, listAvailableContainers } = require('./scrapers/item-scraper');
const { scrapeItemDetails } = require('./scrapers/item-details-scraper');
const { insertCompleteContainer, getItemSources } = require('./db/insert-items');
const { getDatabaseStats, getDuplicateItems } = require('./db/queries');
const pool = require('./db/db');

async function getExistingMobIds() {
  const result = await pool.query(`SELECT id FROM mobs`);
  return new Set(result.rows.map(row => parseInt(row.id)));
}

async function main() {
  const existingIds = await getExistingMobIds();
  let startMobId = 1839 ; // ID inicial para scraping de mobs

  for (let i = 0; i <= 11; i++) {
    const mobId = startMobId + i;
    if (existingIds.has(mobId)) {
      console.log(`üîÅ Pulando mob ${mobId}, j√° existe no banco.`);
      continue;
    }

    try {
      const mobData = await scrapeMobData(mobId);
      if (mobData && mobData.id && mobData.name && mobData.stats && mobData.drops) {
        // await insertCompleteMob(mobData);
      } else {
        console.warn(`‚ö†Ô∏è  Mob ${mobId} inv√°lido`);
      }
    } catch (error) {
      console.error(`‚ùå Erro no mob ${mobId}: ${error.message}`);
    }
  }

  await pool.end();
  console.log('‚úÖ Finalizado.');
}

// Fun√ß√£o para executar scraping de itens de containers espec√≠ficos
async function scrapeContainerItemsFunction() {
  try {
    console.log('üì¶ Containers dispon√≠veis:');
    const containers = listAvailableContainers();
    containers.forEach((container, index) => {
      console.log(`${index + 1}. ${container}`);
    });
    
    // Exemplo: coletar itens do Old Blue Box
    console.log('\nüéÅ Iniciando coleta de itens do Old Blue Box...');
    const oldBlueBoxItems = await scrapeContainerItems('Old Blue Box');
    console.log(`‚úÖ Coletados ${oldBlueBoxItems.length} itens do Old Blue Box`);
    
    // Insere no banco de dados
    if (oldBlueBoxItems.length > 0) {
      const containerData = {
        gid: 1, // Old Blue Box
        name: 'Old Blue Box',
        items: oldBlueBoxItems
      };
      
      const result = await insertCompleteContainer(containerData);
      if (result.success) {
        console.log(`‚úÖ ${result.dropsInserted} itens inseridos no banco`);
      } else {
        console.error(`‚ùå Erro ao inserir: ${result.error}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao coletar itens de containers:', error.message);
  }
}

// Fun√ß√£o para executar scraping de TODOS os containers
async function scrapeAllContainersFunction() {
  try {
    console.log('üì¶ Iniciando coleta de TODOS os containers...');
    const allContainerData = await scrapeAllContainers();
    
    // Exibe resumo
    console.log('\nüìä Resumo da coleta:');
    let totalInserted = 0;
    
    for (const [containerName, data] of Object.entries(allContainerData)) {
      if (data.error) {
        console.log(`‚ùå ${containerName}: ERRO - ${data.error}`);
      } else {
        console.log(`‚úÖ ${containerName}: ${data.itemCount} itens coletados`);
        
        // Insere no banco
        if (data.items.length > 0) {
          const containerData = {
            gid: data.info.gid,
            name: containerName,
            items: data.items
          };
          
          const result = await insertCompleteContainer(containerData);
          if (result.success) {
            totalInserted += result.dropsInserted;
            console.log(`   ‚Üí ${result.dropsInserted} itens inseridos no banco`);
          }
        }
      }
    }
    
    console.log(`\nüéØ Total de itens inseridos: ${totalInserted}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao coletar todos os containers:', error.message);
  }
}

// Fun√ß√£o para mostrar estat√≠sticas do banco
async function showDatabaseStats() {
  try {
    console.log('üìä Estat√≠sticas do Banco de Dados:');
    const stats = await getDatabaseStats();
    
    console.log(`üì¶ Total de itens: ${stats.total_items}`);
    console.log(`üêâ Total de mobs: ${stats.total_mobs}`);
    console.log(`üì¶ Total de containers: ${stats.total_containers}`);
    console.log(`üéØ Itens de mobs: ${stats.items_from_mobs}`);
    console.log(`üì¶ Itens de containers: ${stats.items_from_containers}`);
    console.log(`üîÑ Itens h√≠bridos (mobs + containers): ${stats.hybrid_items}`);
    
    // Mostra alguns itens duplicados
    console.log('\nüîÑ Exemplos de itens h√≠bridos:');
    const duplicates = await getDuplicateItems();
    duplicates.slice(0, 5).forEach(item => {
      console.log(`   ‚Ä¢ ${item.name} - ${item.mob_sources} mobs, ${item.container_sources} containers`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar estat√≠sticas:', error.message);
  }
}

// Fun√ß√£o para buscar fontes de um item espec√≠fico
async function showItemSources(itemId) {
  try {
    console.log(`üîç Buscando fontes do item ID: ${itemId}`);
    const sources = await getItemSources(itemId);
    
    console.log(`\nüìä Item ${itemId} tem ${sources.total_sources} fontes:`);
    
    if (sources.mobs.length > 0) {
      console.log(`\nüêâ Mobs (${sources.mobs.length}):`);
      sources.mobs.forEach(mob => {
        console.log(`   ‚Ä¢ ${mob.name} - ${mob.rate}% drop rate`);
      });
    }
    
    if (sources.containers.length > 0) {
      console.log(`\nüì¶ Containers (${sources.containers.length}):`);
      sources.containers.forEach(container => {
        console.log(`   ‚Ä¢ ${container.name} - ${container.rate}% drop rate`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar fontes do item:', error.message);
  }
}

// Executa scraping de mobs
main();

// Para executar scraping de itens de um container espec√≠fico:
// scrapeContainerItemsFunction();

// Para executar scraping de TODOS os containers:
// scrapeAllContainersFunction();

// Para ver estat√≠sticas do banco:
// showDatabaseStats();

// Para ver fontes de um item espec√≠fico (substitua 13304 pelo ID desejado):
// showItemSources(13304);
